name: CI

on:
  push:
    branches: ["main"]
  pull_request:

env:
  REGISTRY: ghcr.io/${{ toLower(github.repository_owner) }}
  TAG: sha-${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Run API tests
        run: go test ./...
        working-directory: apps/api

      - name: Run API vet
        run: go vet ./...
        working-directory: apps/api

      - name: Run worker tests
        run: go test ./...
        working-directory: apps/worker

      - name: Run worker vet
        run: go vet ./...
        working-directory: apps/worker

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install web dependencies
        run: npm ci
        working-directory: apps/web

      - name: Run web tests
        run: npm run test -- --run
        working-directory: apps/web

      - name: Build web assets
        run: npm run build
        working-directory: apps/web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        id: build_api
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/keepstack-api:${{ env.TAG }}
          platforms: linux/amd64

      - name: Show API image digest
        if: steps.build_api.outputs.digest != ''
        run: echo "API image digest: ${{ steps.build_api.outputs.digest }}"

      - name: Build and push worker image
        id: build_worker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/worker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/keepstack-worker:${{ env.TAG }}
          platforms: linux/amd64

      - name: Show worker image digest
        if: steps.build_worker.outputs.digest != ''
        run: echo "Worker image digest: ${{ steps.build_worker.outputs.digest }}"

      - name: Build and push web image
        id: build_web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/keepstack-web:${{ env.TAG }}
          platforms: linux/amd64

      - name: Show web image digest
        if: steps.build_web.outputs.digest != ''
        run: echo "Web image digest: ${{ steps.build_web.outputs.digest }}"

      - name: Helm lint
        run: |
          helm lint deploy/charts/keepstack
          helm lint deploy/charts/keepstack --set digest.enabled=true

  deploy-and-smoke:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ secrets.KUBECONFIG != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          printf '%s' "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y just jq

      - name: Deploy Keepstack
        run: |
          helm upgrade --install keepstack deploy/charts/keepstack \
            --namespace keepstack --create-namespace \
            -f deploy/values/dev.yaml \
            --set image.registry=${{ env.REGISTRY }} \
            --set image.tag=${{ env.TAG }} \
            --set observability.enabled=true \
            --set backup.enabled=true \
            --set resurfacer.enabled=true

      - name: Wait for application readiness
        run: |
          kubectl -n keepstack rollout status deployment/keepstack-api --timeout=5m
          kubectl -n keepstack rollout status deployment/keepstack-worker --timeout=5m
          kubectl -n keepstack rollout status deployment/keepstack-web --timeout=5m

      - name: Run smoke tests
        run: make smoke

      - name: Collect Grafana dashboard
        if: ${{ always() }}
        run: |
          set -euo pipefail
          mkdir -p artifacts
          kubectl -n keepstack get configmap keepstack-grafana-dashboard -o jsonpath='{.data.keepstack-overview.json}' > artifacts/grafana-dashboard.json

      - name: Collect backup artifacts
        if: ${{ always() }}
        run: |
          set -euo pipefail
          mkdir -p artifacts
          latest_job=$(kubectl -n keepstack get jobs -l app.kubernetes.io/component=backup -o json \
            | jq -er '.items | sort_by(.metadata.creationTimestamp) | last | .metadata.name')
          if [[ -z "$latest_job" || "$latest_job" == "null" ]]; then
            echo "failed to locate latest backup job" >&2
            exit 1
          fi
          printf '%s\n' "$latest_job" > artifacts/latest-backup-job.txt
          kubectl -n keepstack logs "job/${latest_job}" > artifacts/latest-backup.log

      - name: Upload deployment artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: keepstack-deployment-artifacts
          path: artifacts

      - name: Dump troubleshooting information
        if: ${{ failure() }}
        run: |
          kubectl -n keepstack get all
          kubectl -n keepstack describe pods
          kubectl -n keepstack logs deployment/keepstack-api --tail=200 || true
          kubectl -n keepstack logs deployment/keepstack-worker --tail=200 || true
          kubectl -n keepstack logs deployment/keepstack-web --tail=200 || true
          kubectl -n keepstack get events --sort-by='.metadata.creationTimestamp' | tail -n 200 || true
