// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: claims.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClaim = `-- name: CreateClaim :one
WITH upsert AS (
    INSERT INTO claims (link_id, user_id)
    VALUES ($1, $2)
    ON CONFLICT (link_id, user_id) DO UPDATE
        SET claimed_at = claims.claimed_at
    RETURNING id, link_id, user_id, claimed_at, xmax = 0 AS inserted
)
SELECT id, link_id, user_id, claimed_at, inserted
FROM upsert
`

type CreateClaimParams struct {
	LinkID pgtype.UUID
	UserID pgtype.UUID
}

type CreateClaimRow struct {
	ID        pgtype.UUID
	LinkID    pgtype.UUID
	UserID    pgtype.UUID
	ClaimedAt pgtype.Timestamptz
	Inserted  bool
}

func (q *Queries) CreateClaim(ctx context.Context, arg CreateClaimParams) (CreateClaimRow, error) {
	row := q.db.QueryRow(ctx, createClaim, arg.LinkID, arg.UserID)
	var i CreateClaimRow
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.UserID,
		&i.ClaimedAt,
		&i.Inserted,
	)
	return i, err
}
