// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: recommendations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const clearRecommendationsForUser = `-- name: ClearRecommendationsForUser :exec
DELETE FROM recommendations
WHERE link_id IN (
    SELECT id FROM links WHERE user_id = $1
)
`

func (q *Queries) ClearRecommendationsForUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, clearRecommendationsForUser, userID)
	return err
}

const listRecommendationsForUser = `-- name: ListRecommendationsForUser :many
SELECT
    l.id,
    l.url,
    l.title,
    l.source_domain,
    l.favorite,
    l.created_at,
    l.read_at,
    a.title AS archive_title,
    a.byline,
    a.lang,
    COALESCE(a.word_count, 0) AS word_count,
    COALESCE(a.extracted_text, '') AS extracted_text,
    r.score,
    r.updated_at
FROM recommendations r
JOIN links l ON l.id = r.link_id
LEFT JOIN archives a ON a.link_id = l.id
WHERE l.user_id = $1
ORDER BY r.score DESC, r.updated_at DESC
LIMIT $2
`

type ListRecommendationsForUserParams struct {
	UserID pgtype.UUID
	Limit  int32
}

type ListRecommendationsForUserRow struct {
	ID            pgtype.UUID
	Url           string
	Title         pgtype.Text
	SourceDomain  pgtype.Text
	Favorite      bool
	CreatedAt     pgtype.Timestamptz
	ReadAt        pgtype.Timestamptz
	ArchiveTitle  pgtype.Text
	Byline        pgtype.Text
	Lang          pgtype.Text
	WordCount     int32
	ExtractedText string
	Score         int32
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) ListRecommendationsForUser(ctx context.Context, arg ListRecommendationsForUserParams) ([]ListRecommendationsForUserRow, error) {
	rows, err := q.db.Query(ctx, listRecommendationsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecommendationsForUserRow
	for rows.Next() {
		var i ListRecommendationsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.SourceDomain,
			&i.Favorite,
			&i.CreatedAt,
			&i.ReadAt,
			&i.ArchiveTitle,
			&i.Byline,
			&i.Lang,
			&i.WordCount,
			&i.ExtractedText,
			&i.Score,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnreadLinksForUser = `-- name: ListUnreadLinksForUser :many
SELECT
    l.id,
    l.user_id,
    l.url,
    l.title,
    l.created_at,
    l.favorite,
    a.title AS archive_title,
    a.byline,
    a.lang,
    COALESCE(a.word_count, 0) AS word_count,
    COALESCE(a.extracted_text, '') AS extracted_text
FROM links l
LEFT JOIN archives a ON a.link_id = l.id
WHERE l.user_id = $1
  AND l.read_at IS NULL
`

type ListUnreadLinksForUserRow struct {
	ID            pgtype.UUID
	UserID        pgtype.UUID
	Url           string
	Title         pgtype.Text
	CreatedAt     pgtype.Timestamptz
	Favorite      bool
	ArchiveTitle  pgtype.Text
	Byline        pgtype.Text
	Lang          pgtype.Text
	WordCount     int32
	ExtractedText string
}

func (q *Queries) ListUnreadLinksForUser(ctx context.Context, userID pgtype.UUID) ([]ListUnreadLinksForUserRow, error) {
	rows, err := q.db.Query(ctx, listUnreadLinksForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUnreadLinksForUserRow
	for rows.Next() {
		var i ListUnreadLinksForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.CreatedAt,
			&i.Favorite,
			&i.ArchiveTitle,
			&i.Byline,
			&i.Lang,
			&i.WordCount,
			&i.ExtractedText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersWithUnread = `-- name: ListUsersWithUnread :many
SELECT DISTINCT user_id
FROM links
WHERE read_at IS NULL
`

func (q *Queries) ListUsersWithUnread(ctx context.Context) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, listUsersWithUnread)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var user_id pgtype.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertRecommendation = `-- name: UpsertRecommendation :exec
INSERT INTO recommendations (link_id, score, updated_at)
VALUES ($1, $2, $3)
ON CONFLICT (link_id) DO UPDATE
SET score = EXCLUDED.score,
    updated_at = EXCLUDED.updated_at
`

type UpsertRecommendationParams struct {
	LinkID    pgtype.UUID
	Score     int32
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) UpsertRecommendation(ctx context.Context, arg UpsertRecommendationParams) error {
	_, err := q.db.Exec(ctx, upsertRecommendation, arg.LinkID, arg.Score, arg.UpdatedAt)
	return err
}
